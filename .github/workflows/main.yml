name: CI/CD for Flask App (Blue-Green Deployment with Dockerized Tests)

on:
  push:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image with Test Stage
        run: |
          docker build --target tester -t flask-attendance-tester .

      - name: Build and Push Final Image (only if tests pass)
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-attendance-app .
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-attendance-app

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build  # Only deploy if tests and build succeed

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to AWS EC2 (Blue-Green Deployment)
        run: |
          echo "${{ secrets.AWS_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << EOF

            docker network create app_network || true

            if ! docker ps --filter "name=mysql-db" | grep mysql-db; then
              docker run -d \
                --name mysql-db \
                --network app_network \
                -e MYSQL_ROOT_PASSWORD=root \
                -e MYSQL_DATABASE=attendance_db \
                -p 3306:3306 \
                mysql:latest
              sleep 30
            fi

            until docker exec mysql-db mysqladmin ping -h "localhost" --silent; do
                echo "MySQL not ready, retrying..."
                sleep 15
            done

            if docker ps --filter "name=flask-app-blue" | grep flask-app-blue; then
                ACTIVE_COLOR="blue"
                IDLE_COLOR="green"
                IDLE_PORT=5001
            elif docker ps --filter "name=flask-app-green" | grep flask-app-green; then
                ACTIVE_COLOR="green"
                IDLE_COLOR="blue"
                IDLE_PORT=5000
            else
                ACTIVE_COLOR="none"
                IDLE_COLOR="blue"
                IDLE_PORT=5000
            fi

            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-attendance-app

            docker stop flask-app-\$IDLE_COLOR || true
            docker rm flask-app-\$IDLE_COLOR || true

            docker run -d \
              --name flask-app-\$IDLE_COLOR \
              --network app_network \
              -p \$IDLE_PORT:5000 \
              -e DB_HOST=mysql-db \
              -e DB_USER=root \
              -e DB_PASSWORD=root \
              -e DB_NAME=attendance_db \
              ${{ secrets.DOCKER_USERNAME }}/flask-attendance-app

            sudo sed -i "s|localhost:[0-9]*|localhost:\$IDLE_PORT|g" /etc/nginx/conf.d/bluegreen.conf
            sudo nginx -s reload

            if [ "\$ACTIVE_COLOR" != "none" ]; then
                docker stop flask-app-\$ACTIVE_COLOR || true
                docker rm flask-app-\$ACTIVE_COLOR || true
            fi

          EOF
